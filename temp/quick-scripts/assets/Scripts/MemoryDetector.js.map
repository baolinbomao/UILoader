{"version":3,"sources":["MemoryDetector.js"],"names":["MemoryDetector","_inited","showMemoryStatus","cc","sys","isNative","_memLabel","profiler","showStats","createMemLabel","document","createElement","_fps","getElementById","style","height","color","font","lineHeight","width","appendChild","afterVisit","count","totalBytes","locTexrues","textureCache","_textures","key","selTexture","getPixelWidth","getPixelHeight","locTextureColorsCache","_textureColorsCache","selCanvasColorsArr","selCanvasKey","selCanvas","innerHTML","toFixed","director","on","Director","EVENT_AFTER_VISIT","module","exports"],"mappings":";;;;;;AAAA,IAAMA,iBAAiB;AACnBC,aAAS,KADU;;AAGnBC,oBAHmB,8BAGA;AACf,YAAIC,GAAGC,GAAH,CAAOC,QAAX,EAAqB;AACjB;AACH;;AAED,YAAI,KAAKJ,OAAT,EAAkB;AACd;AACH;;AAED,YAAIK,YAAY,IAAhB;AACA,YAAIC,WAAWJ,GAAGI,QAAlB;AACAA,iBAASC,SAAT;;AAEA,YAAIC,iBAAiB,SAAjBA,cAAiB,GAAY;AAC7BH,wBAAYI,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACAJ,qBAASK,IAAT,GAAgBF,SAASG,cAAT,CAAwB,KAAxB,CAAhB;AACAN,qBAASK,IAAT,CAAcE,KAAd,CAAoBC,MAApB,GAA6B,OAA7B;;AAEA,gBAAID,QAAQR,UAAUQ,KAAtB;AACAA,kBAAME,KAAN,GAAc,kBAAd;AACAF,kBAAMG,IAAN,GAAa,4BAAb;AACAH,kBAAMI,UAAN,GAAmB,OAAnB;AACAJ,kBAAMK,KAAN,GAAc,MAAd;AACAZ,qBAASK,IAAT,CAAcQ,WAAd,CAA0Bd,SAA1B;AACH,SAXD;;AAaAG;;AAEA,YAAIY,aAAa,SAAbA,UAAa,GAAY;AACzB,gBAAIC,QAAQ,CAAZ;AACA,gBAAIC,aAAa,CAAjB;AACA,gBAAIC,aAAarB,GAAGsB,YAAH,CAAgBC,SAAjC;;AAEA,iBAAK,IAAIC,GAAT,IAAgBH,UAAhB,EAA4B;AACxB,oBAAII,aAAaJ,WAAWG,GAAX,CAAjB;AACAL;AACAC,8BAAcK,WAAWC,aAAX,KAA6BD,WAAWE,cAAX,EAA7B,GAA2D,CAAzE;AACH;;AAED,gBAAIC,wBAAwB5B,GAAGsB,YAAH,CAAgBO,mBAA5C;;AAEA,iBAAK,IAAIL,IAAT,IAAgBI,qBAAhB,EAAuC;AACnC,oBAAIE,qBAAqBF,sBAAsBJ,IAAtB,CAAzB;AACA,qBAAK,IAAIO,YAAT,IAAyBD,kBAAzB,EAA6C;AACzC,wBAAIE,YAAYF,mBAAmBC,YAAnB,CAAhB;AACAZ;AACAC,kCAAcY,UAAUhB,KAAV,GAAkBgB,UAAUpB,MAA5B,GAAqC,CAAnD;AACH;AACJ;;AAEDT,sBAAU8B,SAAV,GAAsB,eAAe,CAACb,cAAc,SAAS,MAAvB,CAAD,EAAiCc,OAAjC,CAAyC,CAAzC,CAAf,GAA6D,IAAnF;AACH,SAvBD;;AAyBAlC,WAAGmC,QAAH,CAAYC,EAAZ,CAAepC,GAAGqC,QAAH,CAAYC,iBAA3B,EAA8CpB,UAA9C;AACA,aAAKpB,OAAL,GAAe,IAAf;AACH;AA1DkB,CAAvB;;AA6DAyC,OAAOC,OAAP,GAAiB3C,cAAjB","file":"MemoryDetector.js","sourceRoot":"../../../../assets/Scripts","sourcesContent":["const MemoryDetector = {\n    _inited: false,\n\n    showMemoryStatus() {\n        if (cc.sys.isNative) {\n            return;\n        }\n\n        if (this._inited) {\n            return;\n        }\n\n        let _memLabel = null;\n        let profiler = cc.profiler;\n        profiler.showStats();\n\n        let createMemLabel = function () {\n            _memLabel = document.createElement('div');\n            profiler._fps = document.getElementById('fps');\n            profiler._fps.style.height = '100px';\n\n            let style = _memLabel.style;\n            style.color = 'rgb(0, 255, 255)';\n            style.font = 'bold 12px Helvetica, Arial';\n            style.lineHeight = '20px;';\n            style.width = '100%';\n            profiler._fps.appendChild(_memLabel);\n        }\n\n        createMemLabel();\n\n        let afterVisit = function () {\n            let count = 0;\n            let totalBytes = 0;\n            let locTexrues = cc.textureCache._textures;\n\n            for (let key in locTexrues) {\n                let selTexture = locTexrues[key];\n                count++;\n                totalBytes += selTexture.getPixelWidth() * selTexture.getPixelHeight() * 4;\n            }\n\n            let locTextureColorsCache = cc.textureCache._textureColorsCache;\n\n            for (let key in locTextureColorsCache) {\n                let selCanvasColorsArr = locTextureColorsCache[key];\n                for (let selCanvasKey in selCanvasColorsArr) {\n                    let selCanvas = selCanvasColorsArr[selCanvasKey];\n                    count++;\n                    totalBytes += selCanvas.width * selCanvas.height * 4;\n                }\n            }\n            \n            _memLabel.innerHTML = \"  Memory  \" + (totalBytes / (1024.0 * 1024.0)).toFixed(2) + \" M\";\n        }\n\n        cc.director.on(cc.Director.EVENT_AFTER_VISIT, afterVisit);\n        this._inited = true;\n    },\n}\n\nmodule.exports = MemoryDetector;\n"]}